#!/usr/bin/env node

const program = require('commander');

function main(args) {
    program
        .version('0.5.0')
        .option('-F, --format [format]', 'change the output format (default tsv)', 'tsv');

    // Boards
    const board = require("../command/board/index");
    program
        .command('board:add <board>')
        .description('Adds a new board with the specified name')
        .option('-d, --description [desc]', 'the description of the board', null)
        .option('-a, --ageing', 'enable card aging')
        .option('-i, --no-images', 'disable images on cards', false)
        .action(board.add.bind(board));

    program
        .command('board:close <board>')
        .description('Close all boards that match the specified text')
        .action(board.close.bind(board));

    program
        .command('board:show <board>')
        .description('Show the list of cached boards')
        .option('-c, --closed', 'show closed boards')
        .action(board.show.bind(board));

    // Lists
    const list = require("../command/list/index");
    program
        .command('list:add <board> <list>')
        .description('Adds a new board with the specified name')
        .option('-p, --position [top/bottom]', 'position of the new list', 'top')
        .option('-f, --force', 'create board if it doesn\'t already exist')
        .action(list.add.bind(board));

    program
        .command('list:show <board> <list>')
        .description('Show the list of cached boards')
        .option('-c, --closed', 'show closed boards')
        .action(list.show.bind(board));



    // Output help by default if there is no subcommand
    if (process.argv.slice(2).length === 0) {
        program.outputHelp();
        process.exit();
    }

    program.parse(args);

    // Fix for memory leak when running tests
    // MaxListenersExceededWarning: Possible EventEmitter memory leak detected.
    // 11 <name> listeners added. Use emitter.setMaxListeners() to 
    // increase limit
    if (process.env.NODE_ENV === "test") {
        program.eventNames().forEach(function(n) {
            program.listeners(n).forEach(function(l) {
                program.removeListener(n, l);
            });
        });
    }
}

if (require.main === module) {
    main(process.argv);
}

module.exports = main;
